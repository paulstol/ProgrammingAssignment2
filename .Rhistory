makeCacheMatrix <- function(baseMatrix = matrix()) {
inverseMatrix <- NULL
set <- function(newMatrix) {
baseMatrix <<- newMatrix
inverseMatrix <<- NULL
}
get <- function() baseMatrix
setInverse <- function(newInverseMatrix) inverseMatrix <<- newInverseMatrix
getInverse <- function() inverseMatrix
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverseMatrix <- x$getInverse()
if(!is.null(inverseMatrix)) {
message("getting cached inverse matrix")
return(inverseMatrix)
}
data <- x$get()
inverseMatrix <- solve(data, ...)
x$setInverse(inverseMatrix)
inverseMatrix
}
m <- matrix(4,2,7,6, nrow = 2, ncol = 2)
m <- matrix(4,2,7,6, nrow = 2)
m <- matrix(c(4,2,7,6), nrow = 2, ncol = 2)
m
makeCacheMatrix(m)
cacheSolve(m)
mp <- makeCacheMatrix(m)
cacheSolve(mp)
cacheSolve(mp)
result <- cacheSolve(mp)
cacheSolve(result)
mp <- makeCacheMatrix(m)
mp
cacheSolve(mp)
